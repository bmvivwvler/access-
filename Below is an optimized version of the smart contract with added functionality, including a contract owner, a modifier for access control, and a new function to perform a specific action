// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AdvancedSmartContract {
    address private owner;
    uint256 private data;

    event DataUpdated(uint256 newData);
    event ActionPerformed(address indexed performer, string action);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    constructor(uint256 initialData) {
        owner = msg.sender;
        data = initialData;
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data, "New data must be different from current data");
        data = newData;
        emit DataUpdated(newData);
    }

    function getData() external view returns (uint256) {
        return data;
    }

    function performAction(string memory action) external onlyOwner {
        // Add custom logic for the action
        emit ActionPerformed(msg.sender, action);
    }
}
